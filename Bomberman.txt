REQUIRED SOFTWARE COMPONENTS.
board support - STM32F746NG, STM32F746G-Discovery
drivers - basic I/O, SDRAM, touchscreen
graphic lcd - graphic lcd
touchscreen - touchscreen
CMSIS - core
RTOS API - keil rtx
device - startup
STM32...Framework - classic
STM32...HAL - common, cortex, DMA, GPIO, I2C, LDTC, PWR, RCC, SDRAM, UART

REQUIRED ADDITIONAL STEPS.
Select ST-Link as debugger. In RTX_Conf_CM.C change thread stack sizes from 50 to 1024, and
change OS_CLOCK to 200000000 (not the correct way but it slows the game speed down for now).

UPDATE LOG.
31/3/16
Added game structs to keep project vaguely object-oriented - Jack
Added useful constants - Jack
Added enum types for game objects - Jack
Added 2 dimensional array (y/x) for storing tiles - Jack
Added place and draw tile grid code to game_init function - Jack
Added place player code to init function - Jack
Added enemy placement function - Jack
Added enemy movement function - Jack
Added player movement AI for testing function - Jack
Added player movement function - Jack
Added collision code to player and enemy move functions - Jack
Added touch screen control listener function - Jack
Added drop bomb function - Jack
Added bomb explode function - Jack
Added basic UI function - Jack
Added draw tile function - Jack
Added player movement thread - Jack
Added enemy movement thread - Jack
Added controls listener thread - Jack
Added bomb thread - Jack
Added signal bomb thread function - Jack

5/4/16 - Jack
Added drawAtPixel function, renamed drawRect to drawAtCoords
Updated player and enemy movements to move pixel by pixel
Updated redraw code to handle player moving over bomb
Moved repeating code in playerMove to updatePlayer function
Moved repeating code in enemyMove to updateEnemy function
Renamed playerMove and enemyMove to movePlayer and moveEnemies

7/4/16 - Chris
Created bitmaps for most objects in game
Updated updatePlayer & game_init
created methods drawIntPlayer & drawPlayer to mimic drawAtCoords & drawAtPixels respectively

8/4/16 - Jack
exported all bitmaps as RLE c files
cleaned up all draw functions, added Mark's RLE bitmp decode function

20/4/16 - Jack
updated version to use the 7 day MDK professional evaluation period
uncommented out code that previously exceeded bytecode limit
changed all drawChar statements to drawBitmap instead
restricted enemies from moving onto bomb or other enemies
added start and level splash screens, WIP

21/4/16 - Jack
changed enemy placement to use Fisher-Yates Shuffle algorithm
added placeObjects function to place door and powerup objects
updated explosion function to draw door and powerup if hidden

22/4/16 - Jack
added functionality to powerup pickup
updated bombExplode to take into account bomb power

23/4/16 - Chris
added bitmaps for the door and power up
updated functions in bomb_utils to draw the bitmaps
added large bomberman bitmap to splash screen & moved text slightly
updated explosion function to draw door/powerup if they were already revealed

23/4/16 - Jack
cleaned up initGame and initStage functions
implemented lives feature - WIP
added game over screen

TO DO.
stop and start threads on stage reset
Add functionality to door
Player movement: should player be constrained to tile centres after completing a move?
Redraw conrol areas into more suitable shapes i.e. hollow circle split into areas.
Use mutexes and mailbox? Seems to work fine without.
Malloc and free everything to preserve memory?
Add audio?
Add timer?
Add lives?
Add difficulty modifiers for levels?
Add game over, game start, stage screens?
Add points?
Make multiplayer?

BUGS.
1. Bomb thread continues after player death and any pending explosions will appear after level reset
2. Bomb explosions only check for collision once at start of animation
3. Player move thread continues after game reset. Need pause in between games to restart threads and reset game variables

TESTING.




